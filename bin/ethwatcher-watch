#!/usr/bin/env node

const program = require('commander');
const assert = require('assert');
const path = require('path');
const Config = require('simple-yaml-config');
const pkg = require('../package.json');
const validator = require('../lib/validator');
const log = require('../lib/log');
const Eth = require('web3-eth');
const watch = require('../lib/watch');
const setTimeout = require('../lib/setTimeout');

program
  .version(pkg.version)
  .option('-h, --rpc [rpc]', 'Ethereum blockchain rpc url (schema://host:port).', 'http://localhost:8545')
  .option('-c, --config [config]', 'Config file.')
  .option('-a, --address [address]', 'Ethereum address.')
  .option('-s, --retrySeconds [retrySeconds]', 'Retry seconds to next rpc api call.', 1)
  .option('-l, --loopMode [loopMode]', 'Turn on loop mode.', false)
  .option('-F, --watchFrom [watchFrom]', 'Watch from address.', false)
  .option('-T, --watchTo [watchTo]', 'Watch to address.', false)
  .parse(process.argv);

let rpc = program.rpc;
let address = program.address;
let retrySeconds = program.retrySeconds;
let loopMode = program.loopMode;
let watchFrom = program.watchFrom;
let watchTo = program.watchTo;

function checkParams() {
  if (validator.isRPC(rpc) !== true) {
    log.error('Please enter valid rpc.');
    process.exit();
  }
  if (address === undefined) {
    log.error('Please enter address.');
    process.exit();
  }
  if (validator.isAddress(address) !== true) {
    log.error('Please enter valid address.');
    process.exit();
  }
  if (validator.isSeconds(retrySeconds) !== true) {
    log.error('Please enter valid retrySeconds.');
    process.exit();
  }
  if (watchFrom === false && watchTo === false) {
    // set default to watchFrom
    watchFrom = true;
  }
}

function watchBlock() {
  log.info('Start to check params');
  checkParams();
  const eth = new Eth(rpc);

  watch(eth, address, retrySeconds, watchFrom, watchTo).then((txs) => {
    log.info(`Your got total ${txs.length} transactions.`);
    txs.forEach((tx) => {
      log.info(`Tx hash: ${tx.hash}`);
      log.info(`From: ${tx.from}`);
      log.info(`To: ${tx.to}`);
      log.info(`Value: ${tx.value}`);
      log.info(`Nonce: ${tx.nonce}`);
      log.info(`Data: ${tx.input}`);
    });

    if (loopMode === true) {
      
      setTimeout(function () {
        watchBlock();
      }, retrySeconds * 1000);
    }
  }).catch((err) => {
    if (err.message == 'Cannot get eth block number.') {
      setTimeout(function () {
        watchBlock();
      }, retrySeconds * 1000);
    } else {
      log.error(`Watch error: ${err.message}`);
    }
  });
}

if (program.config !== undefined) {
  // load config
  let config = new Config();

  config.load(program.config).then((configData) => {
    if (configData.rpc) {
      rpc = configData.rpc;
    }
  }).catch((err) => {
    log.warn(`Load config failed: ${err.message}`);
  }).then(() => {
    watchBlock();
  }).catch((err) => {
    log.error(`Error: ${err.message}`);
  });
} else {
  watchBlock();
}